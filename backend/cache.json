[
    "[IMAGES]\n0 The cursor is inside a VS Code editor window, positioned on the word \u201cevent\u201d in a TypeScript/JavaScript function parameter list; the yellow wavy underline is highlighted (likely the next click will take place here).\n1 VS Code editor showing another part of the same file; the variable value \u2018powerpoint.py\u2019 is highlighted \u2013 user probably clicked or is about to click on that text.\n2 VS Code context-menu (\u201cGo to \u2026\u201d) is open on the right side of the editor after the user invoked the symbol navigation menu.\n3 A floating, circular green \u201crecord/stop\u201d button from an Activity-Recorder screen-capture tool is highlighted \u2013 the user is about to press Stop to finish recording the demo.\n\n[CLARIFYING QUESTIONS]\n1. The screenshots only show code editing in VS Code and the recording overlay, not the actual steps for extracting images from a PowerPoint slide deck. Could you supply the screenshots that show the real manual workflow (e.g., opening the .pptx, saving slides as pictures, or renaming the file to .zip and extracting, etc.)?\n2. Which approach do you want automated?\n   a) Using PowerPoint\u2019s \u201cSave As \u2192 PNG/JPEG\u201d feature, or  \n   b) Changing the .pptx extension to .zip and extracting \u201c/ppt/media\u201d images, or  \n   c) Something else?\n3. Will the automation always run on Windows? (Needed to know which hot-keys and Explorer behaviour to script.)\n4. Should each PowerPoint file be processed individually (one output folder per .pptx) or should all images from multiple files be copied into a single common folder?\n5. Where are the source .pptx files stored and where should the resulting image folders be placed (fixed paths, or should the script prompt/browse each time)?\nANSWERS:\n\nFollow my example to the best of your ability.",
    "```python\n# These instructions demonstrate one simple, reliable GUI-only way\n# to turn every slide of a PowerPoint file into individual image\n# files (PNG).  It relies on the built-in \u201cSave As \u2192 PNG\u201d feature\n# of Microsoft PowerPoint, requires Windows, and assumes that\n#  (1) File Explorer is already open and showing the folder that\n#      contains one or more .pptx files,\n#  (2) The first .pptx file in the list is pre-selected, and\n#  (3) Microsoft PowerPoint is installed and will be launched when\n#      the .pptx file is opened.\n#\n# The macro opens each presentation, invokes  F12  (Save As),\n# changes \u201cSave as type\u201d to PNG, saves *all* slides (PowerPoint\n# automatically creates a new sub-folder named \u201c<file> PNG Images\u201d),\n# closes the presentation, then moves on to the next .pptx until\n# no more files remain.\n\nstart\n\n#-------------------------------------------------------------------\n# 1) Make sure the File-Explorer window is focused\n#-------------------------------------------------------------------\nmove_to((0.02, 0.10))      # click somewhere in the file-list pane\nleft_click()\n\n#-------------------------------------------------------------------\n# 2) Process every .pptx file that is present\n#-------------------------------------------------------------------\nloop(\n    lambda: (\n        # --- Break the loop when there are no more items below the\n        #     current selection (PgDn returns False when nothing\n        #     changes).  We peek with page_down()/page_up().\n        if_else(\n            lambda: not page_down(),       # nothing happened?\n            lambda: (\n                break_loop(),              # we are done\n            ),\n            lambda: (\n                page_up(),                 # revert test scroll\n            ),\n        ),\n\n        # ----------------------------------------------------------\n        # A) Open the currently-selected presentation\n        # ----------------------------------------------------------\n        hot_key('enter'),\n\n        # --- Give the new PowerPoint window focus by clicking its\n        #     title-bar region (approx. top-centre of the screen).\n        move_to((0.50, 0.03))\n        ,\n        left_click(),\n\n        # ----------------------------------------------------------\n        # B) \u201cSave As\u201d PNG \u2013 quickest is simply pressing  F12\n        # ----------------------------------------------------------\n        hot_key('f12'),                    # open Save-As dialog\n\n        # The following TAB sequence lands on the\n        # \u201cSave as type\u201d drop-down irrespective of the dialog's\n        # variant (usually 7 \u00d7 TAB does it on Win11/Office365).\n        hot_key('tab'); hot_key('tab'); hot_key('tab');\n        hot_key('tab'); hot_key('tab'); hot_key('tab'); hot_key('tab'),\n\n        # Open the file-type list and jump to \u201cPNG\u201d\n        hot_key('alt', 'down'),\n        type_text('png'),                  # quick-jump by typing\n        hot_key('enter'),\n\n        # Hit  Enter  to save\n        hot_key('enter'),\n\n        # When asked \u201cAll Slides / Just This One\u201d, press  Enter\n        # again to accept the default \u201cAll Slides\u201d.\n        hot_key('enter'),\n\n        # ----------------------------------------------------------\n        # C) Close the presentation and return to Explorer\n        # ----------------------------------------------------------\n        hot_key('alt', 'f4'),\n\n        # Bring Explorer back to the foreground by clicking its\n        # task-bar icon (bottom-centre-ish on a standard layout).\n        move_to((0.50, 0.97)),\n        left_click(),\n\n        # ----------------------------------------------------------\n        # D) Select the next file in the list\n        # ----------------------------------------------------------\n        hot_key('down'),\n    ),\n)\n\nend\n```"
]